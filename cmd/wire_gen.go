// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"app_blade/internal/controller"
	"app_blade/internal/repository"
	"app_blade/internal/service"
	"app_blade/internal/startup"
	"app_blade/pkg/app"
	"app_blade/pkg/config"
	"app_blade/pkg/database"
	"app_blade/pkg/logging"
	"app_blade/pkg/web"
	"github.com/google/wire"
)

// Injectors from wire.go:

func CreateApp(options ...config.Option) (*app.App, error) {
	provider, err := config.New(options...)
	if err != nil {
		return nil, err
	}
	v, err := logging.NewOptions(provider)
	if err != nil {
		return nil, err
	}
	loggingProvider, err := logging.New(v...)
	if err != nil {
		return nil, err
	}
	logger := database.NewLogger(loggingProvider)
	v2, err := database.NewOptions(provider)
	if err != nil {
		return nil, err
	}
	db, err := database.New(logger, v2...)
	if err != nil {
		return nil, err
	}
	bladeProductRepository := repository.NewBladeProductRepository(db, loggingProvider)
	bladeProductService := service.NewBladeProductService(bladeProductRepository, loggingProvider)
	bladeProductController := controller.NewBladeProductController(bladeProductService, loggingProvider)
	bladeUserRepository := repository.NewBladeUserRepository(db, loggingProvider)
	bladeUserService := service.NewBladeUserService(bladeUserRepository, loggingProvider)
	bladeUserController := controller.NewBladeUserController(bladeUserService, loggingProvider)
	initializeRouter := controller.InitializeController(bladeProductController, bladeUserController)
	v3, err := web.NewOptions(provider, loggingProvider, initializeRouter)
	if err != nil {
		return nil, err
	}
	webServer := web.New(v3...)
	initializeRunner := startup.StartupConfig(webServer)
	v4, err := app.NewOptions(provider, loggingProvider, initializeRunner)
	if err != nil {
		return nil, err
	}
	appApp := app.New(v4...)
	return appApp, nil
}

// wire.go:

var providerSet = wire.NewSet(config.ProviderSet, logging.ProviderSet, web.ProviderSet, app.ProviderSet, startup.ProviderSet, controller.ProviderSet, service.ProviderSet, repository.ProviderSet, database.ProviderSet)
